/**
 * 1783 병든 나이트
 * NxM 체스판
 * 초기 위치 가장 왼쪽아래 칸에 위치
 * 병든 나이트의 이동 횟수가 4보다 적지 않다면 이동 방법을 모두 한 번씩 사용해야한다.
 * 4보다 적은 경우 이동방법에 대한 제약이 없다.
 * 
 * 1. 2칸 상, 1칸 우
 * 2. 1칸 상, 2칸 우
 * 3. 1칸 하, 2칸 우
 * 4. 2칸 하, 1칸 우
 * 
 * 나이트가 여행에서 방문할 수 있는 최대 개수 구하기.
 * 
 * 항상 우측으로 이동한다.
 * 4번이상 이동할 때 모든 경우를 한번 씩 사용해야하니 2칸씩 이동되는지 확인해야함.
 * 우측 이동이 2칸씩인 2,3번이동은 1번만. 나머지를 1,4로 반복하면 최대.
 * 세로가 1이면 이동이 불가능. => 1
 * 세로가 2이면 2,3번 이동만 가능. => 2칸 오른쪽 갈때마다 한번씩 이동하니 m+1을 해주고 2로나눔.
 * 세로가 3이상 일 떄
 * 가로가 6보다 작으면, 4번 움직이고 1~4를 한번이상 해야하는데 2, 3이 불가능. => 4와 2칸씩 이동한 횟수와 비교해 작은 값 대입
 * 가로가 6보다 크면, 모든 경우가 가능.
 * 최대 이동가능 : 2, 3번이동 1번씩 1,4번 이동 반복.
 * 1번씩 이동하면 결국 m번 한거니까 m번한거에서 2를뺴주면 된다.
 */

// const fs = require('fs')
// const input = fs.readFileSync('/dev/stdin').toString().trim();
const input = "2 6";
const [N, M] = input.split(' ').map(Number);

const solution = (n, m) => {
  if (n === 1) return 1;
  else if (n === 2) return Math.min(4, Math.floor(Number(m + 1) / 2));
  else return m <= 6 ? Math.min(4, m) : m - 2;
}

console.log(solution(N, M));