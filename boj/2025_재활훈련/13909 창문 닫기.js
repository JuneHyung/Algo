/**
 * 13909 창문닫기
 * N개 창문과 Nㅁㅇ 사람이 있다.
 * n번째 사람은 n의 배수인 창문을 열거나 닫는다.
 * n번째 사람까지 진행한 후 열려있는 창문 개수 구하기.
 * 처음 모든 창문은 닫혀있다.
 * 
 * n은 1~ 21억
 * 
 * 마지막에 열려있는 창문 개수 출력
 */
/** 메모리초과
 * 1. n까지 창문상태저장하는 windows 배열 생성 (초기 false)
 * 2. 1부터 n까지 진행하며 각 배수의 상태를 변경
 */
/**
 *  규칙 : n이 무언가의 제곱수가 될때마다 1개씩 늘어난다.
 *  1부터 1개식 증가하면서 제곱수가 n보다 커지면 리턴하게 변경
 */
// const fs = require('fs')
// const input = fs.readFileSync('/dev/stdin').toString().trim()
const input = '24';
const N = Number(input);

const solution = (n) => {
  let cnt = 1;
  while (true) {
    const pow = cnt ** 2;
    if (n < pow) return cnt - 1;
    else {
      cnt++;
    }
  }
}

console.log(solution(N))

// n=1  : 1
// n=2  : 1
// n=3  : 1
// n=4  : 2
// n=5  : 2
// n=6  : 2
// n=7  : 2
// n=8  : 2
// n=9  : 3
// n=10 : 3
// n=11 : 3
// n=12 : 3
// n=13 : 3
// n=14 : 3
// n=15 : 3
// n=16 : 4
// n=17 : 4
// n=18 : 4
// n=19 : 4
// n=20 : 4
// n=21 : 4
// n=22 : 4
// n=23 : 4
// n=24 : 4
// n=25 : 5
// n=26 : 5
// 1 4 9 16 25

// n = 10
// 0 : 0 0 0 0 0 0 0 0 0 0 0
// 1 : 0 1 1 1 1 1 1 1 1 1 1  10
// 2 : 0 1 0 1 0 1 0 1 0 1 0  5
// 3 : 0 1 0 0 0 1 1 1 0 0 0  4
// 4 : 0 1 0 0 1 1 1 1 1 0 0  6
// 5 : 0 1 0 0 1 0 1 1 1 0 1  6
// 6 : 0 1 0 0 1 0 0 1 1 0 1  5
// 7 : 0 1 0 0 1 0 0 0 1 0 1  4
// 8 : 0 1 0 0 1 0 0 0 0 0 1  3
// 9 : 0 1 0 0 1 0 0 0 0 1 1  4
// 10: 0 1 0 0 1 0 0 0 0 1 0  3